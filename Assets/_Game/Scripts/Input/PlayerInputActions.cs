//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/_Game/Scripts/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""7470ab2d-96d8-4b5a-b395-1d1abebb3c8d"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""10d90225-396c-4bc1-8ba8-7a0baf075833"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Execute"",
                    ""type"": ""Button"",
                    ""id"": ""7cb96b4d-b5af-4c8f-9654-e9244e687cba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""5f1ac0c0-bb3d-4c32-8527-50b88cf1862b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NavigationMouse"",
                    ""type"": ""Value"",
                    ""id"": ""c4f82ed6-86f8-4e56-afaf-c2941bbb0799"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""NavigationGamepad"",
                    ""type"": ""Button"",
                    ""id"": ""455cb61c-e562-4e83-a8c1-6a95b2f1f54d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Craft"",
                    ""type"": ""Button"",
                    ""id"": ""10adb208-42f9-4a53-8173-5ec686adf427"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""70991d56-968e-4e01-bdae-3420ced3479b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0bace7d2-32e2-475d-9cef-4097cd83b45e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c93c186-2357-45ee-a799-d45ec0572e2d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Execute"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eaa69714-d8f8-4734-bef5-2e226acd67a8"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Execute"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96b27ddb-fab4-442c-b46e-bbec8cd65a59"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f48b8ec7-427d-4c04-be0a-af62524b16b7"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1b6fe27-0122-4fb8-b087-464c8d6480d5"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""NavigationMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7862f438-59b1-42d2-b214-4533f0b57a85"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""NavigationGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54def0ff-0b00-479d-ac81-e286289216cd"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Craft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Crafting"",
            ""id"": ""656f12ab-6689-4184-9539-428689ef6f83"",
            ""actions"": [
                {
                    ""name"": ""Craft"",
                    ""type"": ""Button"",
                    ""id"": ""bf667fff-f508-4cf0-9a23-04aafcfcccc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NavigationMouse"",
                    ""type"": ""Value"",
                    ""id"": ""787fdd4e-2954-4e3d-ae7e-66cd6cdfaf71"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""d160168e-39df-4500-8003-9ff37a53d529"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""e7b81ad0-7b49-4a38-8228-bb283f0caae9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a954867e-6dff-41d5-ba36-bcdf9afa6873"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Craft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1882ed6-528c-41da-aaaa-e38ba4023a32"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87e6cc08-18ee-471e-a528-8e849e5acd0f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""436ce83a-0f95-4951-87a7-6f422f7fe83a"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""NavigationMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_Execute = m_Player.FindAction("Execute", throwIfNotFound: true);
        m_Player_Back = m_Player.FindAction("Back", throwIfNotFound: true);
        m_Player_NavigationMouse = m_Player.FindAction("NavigationMouse", throwIfNotFound: true);
        m_Player_NavigationGamepad = m_Player.FindAction("NavigationGamepad", throwIfNotFound: true);
        m_Player_Craft = m_Player.FindAction("Craft", throwIfNotFound: true);
        // Crafting
        m_Crafting = asset.FindActionMap("Crafting", throwIfNotFound: true);
        m_Crafting_Craft = m_Crafting.FindAction("Craft", throwIfNotFound: true);
        m_Crafting_NavigationMouse = m_Crafting.FindAction("NavigationMouse", throwIfNotFound: true);
        m_Crafting_Select = m_Crafting.FindAction("Select", throwIfNotFound: true);
        m_Crafting_Exit = m_Crafting.FindAction("Exit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_Execute;
    private readonly InputAction m_Player_Back;
    private readonly InputAction m_Player_NavigationMouse;
    private readonly InputAction m_Player_NavigationGamepad;
    private readonly InputAction m_Player_Craft;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @Execute => m_Wrapper.m_Player_Execute;
        public InputAction @Back => m_Wrapper.m_Player_Back;
        public InputAction @NavigationMouse => m_Wrapper.m_Player_NavigationMouse;
        public InputAction @NavigationGamepad => m_Wrapper.m_Player_NavigationGamepad;
        public InputAction @Craft => m_Wrapper.m_Player_Craft;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Execute.started += instance.OnExecute;
            @Execute.performed += instance.OnExecute;
            @Execute.canceled += instance.OnExecute;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
            @NavigationMouse.started += instance.OnNavigationMouse;
            @NavigationMouse.performed += instance.OnNavigationMouse;
            @NavigationMouse.canceled += instance.OnNavigationMouse;
            @NavigationGamepad.started += instance.OnNavigationGamepad;
            @NavigationGamepad.performed += instance.OnNavigationGamepad;
            @NavigationGamepad.canceled += instance.OnNavigationGamepad;
            @Craft.started += instance.OnCraft;
            @Craft.performed += instance.OnCraft;
            @Craft.canceled += instance.OnCraft;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Execute.started -= instance.OnExecute;
            @Execute.performed -= instance.OnExecute;
            @Execute.canceled -= instance.OnExecute;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
            @NavigationMouse.started -= instance.OnNavigationMouse;
            @NavigationMouse.performed -= instance.OnNavigationMouse;
            @NavigationMouse.canceled -= instance.OnNavigationMouse;
            @NavigationGamepad.started -= instance.OnNavigationGamepad;
            @NavigationGamepad.performed -= instance.OnNavigationGamepad;
            @NavigationGamepad.canceled -= instance.OnNavigationGamepad;
            @Craft.started -= instance.OnCraft;
            @Craft.performed -= instance.OnCraft;
            @Craft.canceled -= instance.OnCraft;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Crafting
    private readonly InputActionMap m_Crafting;
    private List<ICraftingActions> m_CraftingActionsCallbackInterfaces = new List<ICraftingActions>();
    private readonly InputAction m_Crafting_Craft;
    private readonly InputAction m_Crafting_NavigationMouse;
    private readonly InputAction m_Crafting_Select;
    private readonly InputAction m_Crafting_Exit;
    public struct CraftingActions
    {
        private @PlayerInputActions m_Wrapper;
        public CraftingActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Craft => m_Wrapper.m_Crafting_Craft;
        public InputAction @NavigationMouse => m_Wrapper.m_Crafting_NavigationMouse;
        public InputAction @Select => m_Wrapper.m_Crafting_Select;
        public InputAction @Exit => m_Wrapper.m_Crafting_Exit;
        public InputActionMap Get() { return m_Wrapper.m_Crafting; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CraftingActions set) { return set.Get(); }
        public void AddCallbacks(ICraftingActions instance)
        {
            if (instance == null || m_Wrapper.m_CraftingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CraftingActionsCallbackInterfaces.Add(instance);
            @Craft.started += instance.OnCraft;
            @Craft.performed += instance.OnCraft;
            @Craft.canceled += instance.OnCraft;
            @NavigationMouse.started += instance.OnNavigationMouse;
            @NavigationMouse.performed += instance.OnNavigationMouse;
            @NavigationMouse.canceled += instance.OnNavigationMouse;
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        private void UnregisterCallbacks(ICraftingActions instance)
        {
            @Craft.started -= instance.OnCraft;
            @Craft.performed -= instance.OnCraft;
            @Craft.canceled -= instance.OnCraft;
            @NavigationMouse.started -= instance.OnNavigationMouse;
            @NavigationMouse.performed -= instance.OnNavigationMouse;
            @NavigationMouse.canceled -= instance.OnNavigationMouse;
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        public void RemoveCallbacks(ICraftingActions instance)
        {
            if (m_Wrapper.m_CraftingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICraftingActions instance)
        {
            foreach (var item in m_Wrapper.m_CraftingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CraftingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CraftingActions @Crafting => new CraftingActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnExecute(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
        void OnNavigationMouse(InputAction.CallbackContext context);
        void OnNavigationGamepad(InputAction.CallbackContext context);
        void OnCraft(InputAction.CallbackContext context);
    }
    public interface ICraftingActions
    {
        void OnCraft(InputAction.CallbackContext context);
        void OnNavigationMouse(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
}
